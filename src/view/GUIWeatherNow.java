package view;
import controller.ControllerWeatherNow;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import model.WeatherNow;
import view.GUIMainMenu.NewRender;
import view.GUIMainMenu.ImageRenderer;


/**
 *   @ Νικήτογλου Ελευθέριος - std100152@ac.eap.gr
 *   @ Ρούσσου Άννα - std114276@ac.eap.gr   
 *   @ Σιδηρόπουλος Κωνσταντίνος - std114284@ac.eap.gr
 *   @ Τμήμα ΘΕΣ-2 2017-18
 */

public class GUIWeatherNow extends javax.swing.JInternalFrame {
       
    private final ControllerWeatherNow ctrl;
    
    public GUIWeatherNow() 
    {
        ctrl = new ControllerWeatherNow();
        getContentPane().setBackground( new Color(173,195,221)); // αλλαγη χρωματος background του frame
        initComponents();
         panel.setVisible(false);
     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        city2 = new model.City();
        eWeatherPUEntityManager0 = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("eWeatherPU").createEntityManager();
        cityQuery = java.beans.Beans.isDesignTime() ? null : eWeatherPUEntityManager0.createQuery("SELECT c FROM City c");
        cityList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : cityQuery.getResultList();
        returnbutton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        citieslist = new javax.swing.JList<>();
        citylabel = new javax.swing.JLabel();
        weatherrefresh = new javax.swing.JButton();
        weathernowbutton = new javax.swing.JButton();
        panel = new javax.swing.JPanel();
        jscroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setMaximizable(true);
        setResizable(true);
        setTitle("Ο Καιρός τώρα");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/weathernow.png"))); // NOI18N

        returnbutton.setBackground(new java.awt.Color(173, 195, 221));
        returnbutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        returnbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/backbutton.png"))); // NOI18N
        returnbutton.setText("Επιστροφή");
        returnbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnbuttonActionPerformed(evt);
            }
        });

        citieslist.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        org.jdesktop.swingbinding.JListBinding jListBinding = org.jdesktop.swingbinding.SwingBindings.createJListBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cityList, citieslist);
        jListBinding.setDetailBinding(org.jdesktop.beansbinding.ELProperty.create("${cityName}"));
        bindingGroup.addBinding(jListBinding);

        jScrollPane1.setViewportView(citieslist);

        citylabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        citylabel.setText("Επιλέξτε μια ή περισσότερες πόλεις:");

        weatherrefresh.setBackground(new java.awt.Color(173, 195, 221));
        weatherrefresh.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        weatherrefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/refreshbutton.png"))); // NOI18N
        weatherrefresh.setText("Ανανέωση καιρού");
        weatherrefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weatherrefreshActionPerformed(evt);
            }
        });

        weathernowbutton.setBackground(new java.awt.Color(173, 195, 221));
        weathernowbutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        weathernowbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/weathernowbutton.png"))); // NOI18N
        weathernowbutton.setText("Καιρός τώρα");
        weathernowbutton.setBorder(null);
        weathernowbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weathernowbuttonActionPerformed(evt);
            }
        });

        panel.setBackground(new java.awt.Color(173, 195, 221));

        table.setAutoCreateRowSorter(true);
        table.setBackground(new java.awt.Color(173, 195, 221));
        table.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        table.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Πόλη", "Θερμοκρασία", "Καιρός", "", "Άνεμος", "Σύννεφα", "Βροχή", "Χιόνι"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setAutoscrolls(false);
        jscroll.getViewport().setBackground(new Color(173,195,221));
        table.setGridColor(new java.awt.Color(0, 0, 0));
        table.setRowHeight(50);
        table.setRowMargin(10);
        table.getTableHeader().setReorderingAllowed(false);
        jscroll.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
            table.getColumnModel().getColumn(5).setResizable(false);
            table.getColumnModel().getColumn(6).setResizable(false);
            table.getColumnModel().getColumn(7).setResizable(false);
        }

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jscroll, javax.swing.GroupLayout.DEFAULT_SIZE, 905, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jscroll, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(citylabel, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(weatherrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(362, 362, 362))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(weathernowbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(returnbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(citylabel, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weathernowbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(returnbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(weatherrefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnbuttonActionPerformed
             citieslist.clearSelection();
             DefaultTableModel model = (DefaultTableModel) table.getModel();
             model.setRowCount(0);
             panel.setVisible(false);
             setVisible(false);
             
    }//GEN-LAST:event_returnbuttonActionPerformed

    private void weathernowbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weathernowbuttonActionPerformed
        if (isCitiesListEmpty())
            return;
         showTable();
    }//GEN-LAST:event_weathernowbuttonActionPerformed

    private void weatherrefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weatherrefreshActionPerformed
        if (isCitiesListEmpty())
            return;
        ctrl.updateWeatherNowData();
        showTable();
    }//GEN-LAST:event_weatherrefreshActionPerformed

      /* μεθοδος εμφάνισης των στοιχείων στον πίνακα */
    private void showTable()
    {  
       panel.setVisible(true);
       table.getTableHeader().setDefaultRenderer(new NewRender()); //αλλαγή του deafult renderer για την μορφοποιηση
       int colCount = table.getColumnCount();
       DefaultTableModel tModel = (DefaultTableModel) table.getModel();
       tModel.setRowCount(0);

        Object[] ob = new Object[colCount];
        /*αλλαγή πλάτους στηλών*/
        table.getColumnModel().getColumn(0).setMinWidth(90);  
        table.getColumnModel().getColumn(1).setMinWidth(90);
        table.getColumnModel().getColumn(2).setMinWidth(200);
   
        table.getColumnModel().getColumn(3).setCellRenderer(new ImageRenderer());  //αλλάγη του default renderer για ττην συγκεκριμένη στήλη 
        
        List<String> selectedCities = citieslist.getSelectedValuesList();
        
        DecimalFormat dfn = new DecimalFormat("0.00");
        int row = 0;
        for (String sc : selectedCities)
        {
            WeatherNow wn = ctrl.selectWeatherNowByCityName(sc);
            for (int col=0; col < colCount; col++)
            {
                JLabel icon = new JLabel();
                icon.setIcon(new ImageIcon("src/img/icons/"+wn.getIcon()+".png"));
                ob[0] = wn.getCity().getCityName();
                ob[1] = Math.round(wn.getMaintemp()) + " °C" ;
                ob[2] = wn.getWeatherDescId().getWeatherDescGr();
                ob[3] = icon;
                ob[4] = wn.getWindspeed() + " m/sec";
                ob[5] = Math.round(wn.getCloudsall()) + " %";
                ob[6] = null;
                if (wn.getRain() != null)
                    ob[7] = dfn.format(wn.getRain().doubleValue()) +" mm";
                ob[7] = null;
                if (wn.getSnow() != null)
                    ob[8] = dfn.format(wn.getSnow().doubleValue() + " mm");
            }
            tModel.addRow(ob);
            row++;
        }
    }
        /*Έλεγχος αν έχει επιλεγεί στοιχείο απ τη λίστα και εμφάνιση αντίστοιχου μυνήματος*/

    private boolean isCitiesListEmpty()
    {
        if (citieslist.getSelectedValue() == null )
        {
            JOptionPane.showMessageDialog(new JFrame(),
            "Δεν έχετε επιλέξει καμία πόλη.",
            "Μήνυμα σφάλματος",
            JOptionPane.ERROR_MESSAGE);
            return true;
        }
        return false;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> citieslist;
    private model.City city2;
    private java.util.List<model.City> cityList;
    private javax.persistence.Query cityQuery;
    private javax.swing.JLabel citylabel;
    private javax.persistence.EntityManager eWeatherPUEntityManager0;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jscroll;
    private javax.swing.JPanel panel;
    private javax.swing.JButton returnbutton;
    private javax.swing.JTable table;
    private javax.swing.JButton weathernowbutton;
    private javax.swing.JButton weatherrefresh;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
   
  
}
