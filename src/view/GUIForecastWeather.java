package view;
import controller.ControllerForecast;
import java.awt.Color;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Forecast;
import view.GUIMainMenu.NewRender;
import view.GUIMainMenu.ImageRenderer;


/**
 *   @ Νικήτογλου Ελευθέριος - std100152@ac.eap.gr
 *   @ Ρούσσου Άννα - std114276@ac.eap.gr   
 *   @ Σιδηρόπουλος Κωνσταντίνος - std114284@ac.eap.gr
 *   @ Τμήμα ΘΕΣ-2 2017-18
 */


public class GUIForecastWeather extends javax.swing.JInternalFrame {

    private final ControllerForecast ctrl;
    
    public GUIForecastWeather() 
    {
        ctrl = new ControllerForecast();
        getContentPane().setBackground( new Color(173,195,221)); // αλλαγη χρωματος background του frame
        initComponents();
        /*Στην αρχή το comboBox δε θα έχει επιλεγμένη κάποια πόλη αλλά μια κενή επιλογή*/
        cityCombobox.setSelectedIndex(-1);
        panel.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        city1 = new model.City();
        eWeatherPUEntityManager0 = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("eWeatherPU").createEntityManager();
        cityQuery = java.beans.Beans.isDesignTime() ? null : eWeatherPUEntityManager0.createQuery("SELECT c.cityName FROM City c");
        cityList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : cityQuery.getResultList();
        Backbutton = new javax.swing.JButton();
        forecastweatherbutton = new javax.swing.JButton();
        forecast5daysbutton = new javax.swing.JButton();
        forecast1daybutton = new javax.swing.JButton();
        cityCombobox = new javax.swing.JComboBox<>();
        citylabel = new javax.swing.JLabel();
        panel = new javax.swing.JPanel();
        jscroll = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setMaximizable(true);
        setResizable(true);
        setTitle("Πρόβλεψη Καιρού");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/calendar.png"))); // NOI18N

        Backbutton.setBackground(new java.awt.Color(173, 195, 221));
        Backbutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Backbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/backbutton.png"))); // NOI18N
        Backbutton.setText("Επιστροφή");
        Backbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackbuttonActionPerformed(evt);
            }
        });

        forecastweatherbutton.setBackground(new java.awt.Color(173, 195, 221));
        forecastweatherbutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        forecastweatherbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/refreshbutton.png"))); // NOI18N
        forecastweatherbutton.setText("Ανανέωση πρόβλεψης καιρού");
        forecastweatherbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forecastweatherbuttonActionPerformed(evt);
            }
        });

        forecast5daysbutton.setBackground(new java.awt.Color(173, 195, 221));
        forecast5daysbutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        forecast5daysbutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/calendar5button.png"))); // NOI18N
        forecast5daysbutton.setText("Πρόβλεψη καιρού 5 ημερών");
        forecast5daysbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forecast5daysbuttonActionPerformed(evt);
            }
        });

        forecast1daybutton.setBackground(new java.awt.Color(173, 195, 221));
        forecast1daybutton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        forecast1daybutton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/gui/calendar1button.png"))); // NOI18N
        forecast1daybutton.setText("Πρόβλεψη καιρού 1ης ημέρας");
        forecast1daybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forecast1daybuttonActionPerformed(evt);
            }
        });

        cityCombobox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${resultList}");
        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, cityQuery, eLProperty, cityCombobox);
        bindingGroup.addBinding(jComboBoxBinding);

        cityCombobox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityComboboxActionPerformed(evt);
            }
        });

        citylabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        citylabel.setText("Επιλογή Πόλης:");

        panel.setBackground(new java.awt.Color(173, 195, 221));

        table.setAutoCreateRowSorter(true);
        table.setBackground(new java.awt.Color(173, 195, 221));
        table.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Πόλη", "Ημερομηνία", "Θερμοκρασία", "Καιρός", "", "Άνεμος", "Σύννεφα", "Βροχή", "Χιόνι"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jscroll.getViewport().setBackground(new Color(173,195,221));
        table.setRowHeight(40);
        table.setRowMargin(10);
        table.setShowVerticalLines(false);
        table.getTableHeader().setReorderingAllowed(false);
        jscroll.setViewportView(table);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jscroll, javax.swing.GroupLayout.PREFERRED_SIZE, 937, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jscroll, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(citylabel)
                    .addComponent(cityCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(162, 162, 162)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(forecast5daysbutton, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(forecast1daybutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(forecastweatherbutton, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                    .addComponent(Backbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(23, 23, 23))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(forecast1daybutton, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                            .addComponent(Backbutton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(forecastweatherbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(forecast5daysbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(citylabel)
                        .addGap(18, 18, 18)
                        .addComponent(cityCombobox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackbuttonActionPerformed
        cityCombobox.setSelectedIndex(-1);
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        panel.setVisible(false);
        setVisible(false);
    }//GEN-LAST:event_BackbuttonActionPerformed

    private void cityComboboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityComboboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cityComboboxActionPerformed

    private void forecast1daybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forecast1daybuttonActionPerformed
        /*Αν δεν έχει επιλεγεί πόλη εμφάνιση αντίστοιχου μηνύματος*/
        if (!isCitiesListItemSelected())
           return;
         
        String selectedCity = (String)cityCombobox.getSelectedItem();
        showTable(ctrl.selectNext24hForecasts(selectedCity,8));
    }//GEN-LAST:event_forecast1daybuttonActionPerformed

    private void forecast5daysbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forecast5daysbuttonActionPerformed
        if (!isCitiesListItemSelected())
           return;
         
        String selectedCity = (String)cityCombobox.getSelectedItem();
        showTable(ctrl.select11NextDayForecasts(selectedCity));
    }//GEN-LAST:event_forecast5daysbuttonActionPerformed

    private void forecastweatherbuttonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_forecastweatherbuttonActionPerformed
    {//GEN-HEADEREND:event_forecastweatherbuttonActionPerformed
        if (!isCitiesListItemSelected())
           return;
        
        /*Ανανέωση δεδομένων και εμφάνιση αντίστοιχου πίνακα*/
        ctrl.updateAndKeepForecastData();
        String selectedCity = (String)cityCombobox.getSelectedItem();
        showTable(ctrl.selectNext24hForecasts(selectedCity,8));
    }//GEN-LAST:event_forecastweatherbuttonActionPerformed

    /* μεθοδος εμφάνισης των στοιχείων στον πίνακα */
    private void showTable(List<Forecast> forecastList)
    {
        panel.setVisible(true);
        table.getTableHeader().setDefaultRenderer(new NewRender());
        int colCount = table.getColumnCount();
        DefaultTableModel tModel = (DefaultTableModel) table.getModel();
        tModel.setRowCount(0);
        Object[] ob = new Object[colCount];
        /*αλλαγή πλάτους στηλών*/
        table.getColumnModel().getColumn(0).setMinWidth(90);
        table.getColumnModel().getColumn(1).setMinWidth(130);
        table.getColumnModel().getColumn(2).setMinWidth(100);
        table.getColumnModel().getColumn(3).setMinWidth(200);
        table.getColumnModel().getColumn(4).setCellRenderer(new ImageRenderer()); //αλλάγη του deafult renderer για ττην συγκεκριμένη στήλη 
        table.getColumnModel().getColumn(5).setMinWidth(90);
        
        /*Προσαρμογή για τη μορφή εμφάνισης των δεδομένων στον πίνακα*/
        DecimalFormat dfn = new DecimalFormat("0.00");
        SimpleDateFormat df = new SimpleDateFormat("d-MM-yyyy kk:mm");
        
        for (Forecast f : forecastList)
        { 
            for (int row=0 ; row  < forecastList.size(); row++)
            {
                JLabel icon = new JLabel();
                icon.setIcon(new ImageIcon("src/img/icons/"+f.getIcon()+".png"));
                ob[0] = f.getCity().getCityName();
                ob[1] = df.format(f.getForecastPK().getDt());
                ob[2] = Math.round(f.getMaintemp()) + " °C" ;
                ob[3] = f.getWeatherDescId().getWeatherDescGr();
                ob[4] = icon;
                ob[5] = f.getWindspeed() + " m/sec";
                ob[6] = Math.round(f.getCloudsall()) + " %";
                ob[7] = null;
                if (f.getRain() != null)
                    ob[7] = dfn.format(f.getRain().doubleValue()) + " mm";
                 ob[8] = null;
                if (f.getSnow() != null)
                    ob[8] = dfn.format(f.getSnow().doubleValue()) + " mm";
            }
            tModel.addRow(ob);  
        }
    }
    
    /*Έλεγχος αν έχει επιλεγεί στοιχείο απ τη λίστα και εμφάνιση αντίστοιχου μυνήματος*/
    private boolean isCitiesListItemSelected()
    {
        if (cityCombobox.getSelectedItem()== null )
        {
            JOptionPane.showMessageDialog(new JFrame(),
            "Δεν έχετε επιλέξει καμία πόλη.",
            "Μήνυμα σφάλματος",
            JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Backbutton;
    private model.City city1;
    private javax.swing.JComboBox<String> cityCombobox;
    private java.util.List<model.City> cityList;
    private javax.persistence.Query cityQuery;
    private javax.swing.JLabel citylabel;
    private javax.persistence.EntityManager eWeatherPUEntityManager0;
    private javax.swing.JButton forecast1daybutton;
    private javax.swing.JButton forecast5daysbutton;
    private javax.swing.JButton forecastweatherbutton;
    private javax.swing.JScrollPane jscroll;
    private javax.swing.JPanel panel;
    private javax.swing.JTable table;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    
}
